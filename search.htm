<html>
<link rel="search" type="application/opensearchdescription+xml" title="Red" href="RedSearchPlugin.xml">
<link rel="shortcut icon" href="favicon.ico" type="image/x-icon" /> 

<style>
*{margin:0px;padding:0px;}
body{width:100%;height:100%;font:80% helvetica, arial, sans-serif;}
#bodyDiv{width:100%;height:100%;}
#topTable{width:100%;height:100%;border:0px;padding:0px;border-spacing:0px;}
#topTable tr{border:2px solid;}
#lefttd{width:250px;}
#righttd{}
#searchFrame{width:100%;height:100%;border:0px;z-index:10;}

#leftDiv{position:relative;width:100%;height:100%;background-color:green;background-image:url('img/backBar.gif');text-align:left;vertical-align:top;}
#overlayDropText{position:absolute;z-index:3;left:0px;top:0px;border:0px;width:100%;height:100%;background-color:transparent;color:trasparent;font-size:0px;cursor:default;}

/*Important here that width is fixed to 250 not relative*/
#leftDivContent{position:relative;width:100%;height:100%;}

#debugText{}

</style>
<script type="text/javascript">

String.prototype.startsWith = function(str)
{return (this.match("^"+str)==str)}

// give the query from window.location i.e. current url
// returns "" if no query found
function getQuery()
{
	var parts = String(window.location).split("#");
	
	if (parts.length > 1)
	{
		var query = parts[1];
		
		return query;
	}
	else
	{
		return "";
	}
}

// checks if query contains any keyword from keywordsArray 
// it will return match if query contains # befor any word
function containsKeyword(query, keywordsArray)
{
	var len = keywordsArray.length;
	
	query = unescape(query);
	
	alert("processing query:"+query);
	
	// replace spaces(" ") with "+" for easy split
	query = query.replace(" ", "+");

	var queryParts = query.split("+");
	
	for (var j=0;j<queryParts.length;j++)
	{
		var queryPart = queryParts[j];
		
		if (queryPart.startsWith("#"))
		{
			// match found
			return true;
		}
	}
	
	for (var i=0;i<len;i++)
	{
		var keyword = keywordsArray[i];
		
		for (var j=0;j<queryParts.length;j++)
		{
			var queryPart = queryParts[j];
			if (queryPart == keyword)
			{
				// match found
				return true;
			}
		}
	}
	
	return false;
}

function getCookie(c_name)
{
	if (document.cookie.length>0)
	{
		c_start=document.cookie.indexOf(c_name + "=");
		if (c_start!=-1)
		{
			c_start=c_start + c_name.length+1;
			c_end=document.cookie.indexOf(";",c_start);
			if (c_end==-1) c_end=document.cookie.length;
			return unescape(document.cookie.substring(c_start,c_end));
		}
	}
	return "";
}

function getKeywordsArrayLocal()
{
	var username = getCookie("username");

	var keywordsStr = localStorage.getItem(username+".keywords", "");
	
	if (keywordsStr != null)
	{
		var keywords = keywordsStr.split(",");
	}
	else
	{
		return null;
	}
	
	return keywords;
}

function setKeywordsArrayLocal(keywords)
{
	var username = getCookie("username");
	localStorage.setItem(username+".keywords", keywords);
	localStorage.setItem(username+".lastUpdateDateTime", new Date());
}

function needKeywordsUpdate()
{
	var username = getCookie("username");
	
	var lastUpdateDateTimeStr = localStorage.getItem(username+".lastUpdateDateTime");
	
	if (lastUpdateDateTimeStr == null)
	{
		var lastUpdateDateTime = new Date(0);
	}
	else
	{
		var lastUpdateDateTime = new Date(lastUpdateDateTimeStr);
	}

	var currentDateTime = new Date();
	
	var noOfDaysToExpire = 1;
	var millisInDay = 86400000;
	
	var refreshDateTime = new Date(lastUpdateDateTime.getTime() + (noOfDaysToExpire * millisInDay));

	if (currentDateTime > refreshDateTime)
	{
		// needs refresh
		return true;
	}
	else if(String(window.location).indexOf("update=f") != -1)
	{
		return true;
	}
	
	
	return false;
}

// waitForUpdate is ignored right now
function updateKeywordsArray(waitForUpdate)
{
	var xmlhttp;
	if (window.XMLHttpRequest)
	{
		// code for IE7+, Firefox, Chrome, Opera, Safari
		xmlhttp=new XMLHttpRequest();
	}
	else
	{
		// code for IE6, IE5
		xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
	}
	xmlhttp.onreadystatechange=function()
	{
		if (xmlhttp.readyState==4 && xmlhttp.status==200)
		{
			var lines = xmlhttp.responseText.split("\n");

			//document.getElementById("myDiv").innerHTML=xmlhttp.responseText;

			//document.write(xmlhttp.responseText);
			
			var keywords = new Array();
			
			for (var i=0;i<lines.length;i++)
			{
				var line = lines[i];
				
				if (line.length > 0)
				{
					keywords.push(line);
				}
			}

			setKeywordsArrayLocal(keywords);
		}
	};
	xmlhttp.open("GET","keywords.php?action=enlist",true);
	xmlhttp.send();
}

function getKeywordsArray()
{
	var keywords = getKeywordsArrayLocal();
	
	if (getKeywordsArrayLocal() == null)
	{
		updateKeywordsArray(true);
	}
	else if (needKeywordsUpdate()) 
	{
		updateKeywordsArray(false);
	}
	
	return keywords;
}

function getDefaultSearchEngineUrl()
{
	return "http://www.google.com/search?q=" + "{searchTerms}";
}

function checkUrlForAnchor()
{
 	if (this.url == (window.location + ""))	
	{
		return;
	}
	else
	{
 		this.url = window.location + "";
	}

	var searchFrame = document.getElementById("searchFrame");

	var query = getQuery();

	if (query != "")
	{	
		//alert("as");
		// if query contains hot keywords
		// then use custom search page otherwise forward to default search engine
		var keywordsArray = getKeywordsArray();

		if ( containsKeyword(query, keywordsArray) )
		{
			var searchUrl = "http://www.google.com/search?q=" + query;
		
			// For version 1.0 only google search will be supported as default search
			searchFrame.src = searchUrl;
		}
		else
		{
			var searchUrl = getDefaultSearchEngineUrl();

			// following timeOut is used so that user is redirected to search engine from where user can click
			// back button to come back to this page
			setTimeout(function(url){window.location=url},1, searchUrl.replace("{searchTerms}", query));
		}		
	}
	else
	{
		searchFrame.src = "http://www.google.com/";
	}
}

function loaded()
{
	checkUrlForAnchor();
	
	// following check is added to track changes in anchor (after #) part of
	// the url
	// Changes in anchor does no cause page reload so it is important to check anchor regularly for any changes
	setInterval('checkUrlForAnchor()',100);

	var overlayDropText = document.getElementById("overlayDropText");

	overlayDropText.ondragenter=overlayDropTextDragEnter;
	overlayDropText.ondragover=overlayDropTextDragOver;
	overlayDropText.ondragleave=overlayDropTextDragLeave;

	/////////////
	// Firefox supports ondrop
	// but used for clearing interval i.e. clearing tracker which checks if drop is completed
	overlayDropText.ondrop=overlayDropTextDragdrop;

	overlayDropText.addEventListener("dragdrop", overlayDropTextDragdrop, false);
	
	//var t=setTimeout("window.alert('5 seconds!')",5000);
}

function getBrowser()
{
	var userAgent = navigator.userAgent.toLowerCase();

	// assumed default
	if (userAgent.indexOf('firefox') > -1)
	{
		return "firefox";
	}
	else if (userAgent.indexOf('chrome') > -1)
	{
		return "chrome";
	}
	else if (userAgent.indexOf('safari') > -1)
	{
		return "safari";
	}	
	else if (userAgent.indexOf('msie') > -1)
	{
		return "ie";
	}
}

function showDebug(msg)
{
	var debugText = document.getElementById("debugText");
	
	debugText.innerHTML = msg;
}

////////////////
// For Chrome which doesn't seem to support drop
////////////////
var dropTrackerId=-1;
var curDropX, curDropY;

function dropTracker()
{
	var overlayDropText = document.getElementById("overlayDropText");
	
	if (overlayDropText.value != "")
	{
		clearInterval(dropTrackerId);
		dropTrackerId = -1;
		var url = overlayDropText.value;
		overlayDropText.value = "";
		linkDropped(curDropX, curDropY, url);
	}
}

function overlayDropTextDragEnter(event)
{
	curDropX = event.clientX;
	curDropY = event.clientY;

	linkEnter(curDropX, curDropY);
	linkDragging(curDropX, curDropY);

	if (getBrowser() == "chrome" && dropTrackerId == -1)
	{
		dropTracker();
		dropTrackerId = setInterval(dropTracker, 20);
	}
}

function overlayDropTextDragOver(event)
{
	curDropX = event.clientX;
	curDropY = event.clientY;

	linkDragging(curDropX, curDropY);
}

function overlayDropTextDragLeave(event)
{
	if (dropTrackerId != -1)
	{
		clearInterval(dropTrackerId);
		dropTrackerId = -1;
	}

	linkExit();
}

///////////////
// Not used for now
// Will be used in future if decided to use ondrop
// but ondrop does not work in chrome
function overlayDropTextDragdrop(event)
{
	var overlayDropText = document.getElementById("overlayDropText");
	var url = overlayDropText.value;
	overlayDropText.value = "";
	linkDropped(event.clientX, event.clientY, url);	
}

function hideOverlayText()
{
	var overlayDropText = document.getElementById("overlayDropText");
	
	overlayDropText.style.visibility = 'hidden';
}

function showOverlayText()
{
	var overlayDropText = document.getElementById("overlayDropText");
	
	overlayDropText.style.visibility = 'visible';
}

//////////////////////////////////
// Following functions will be called
// at appropriate times
//////////////////////////////////

function linkEnter(x, y)
{
	document.title = "Enter";
}

function linkDragging(x, y)
{
	showDebug(x +","+y);
}

function linkExit()
{
	document.title = "Exit";
}

function linkDropped(x, y, url)
{
	//alert('dropped'+x+y+url);
	
	addIcon(x, y, url);
}

//////////////////////////
// Following code should go into its own iframe
// Right now supporting only youtube as menuTitle
//////////////////////////

function addIcon(x, y, url)
{
	// some attributes of icon
	var iWidth = 24, iHeight = 24;
	
	// get parent
	var parentDiv = document.getElementById("leftDivContent");
	
	var newIcon = document.createElement('div');
	newIcon.style.width = iWidth;
	newIcon.style.height = iHeight;
	newIcon.style.backgroundColor = 'red';
	//newIcon.style.opacity = '0.2';
	newIcon.style.backgroundImage = "url('http://www.reddit.com/favicon.ico')";	
	
	//alert(newIcon);
	
	//parentDiv.appendChild(newIcon);
	
	var xmlhttp;
	if (window.XMLHttpRequest)
	{
		// code for IE7+, Firefox, Chrome, Opera, Safari
		xmlhttp=new XMLHttpRequest();
	}
	else
	{
		// code for IE6, IE5
		xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
	}
	xmlhttp.onreadystatechange=function()
	{
		if (xmlhttp.readyState==4 && xmlhttp.status==200)
		{
			//alert(xmlhttp.responseText);
			
			parentDiv.innerHTML += xmlhttp.responseText;
		}
	}
	xmlhttp.open("GET","getIconDiv?"+"url="+encodeURIComponent(url)+"&x="+x+"&y="+y,true);
	xmlhttp.send();
}


</script>
</head>
<body onload="loaded()">
<div id="bodyDiv">
<table id="topTable">
	<tr>
		<td id="lefttd">
			<div id="leftDiv" onmouseover="hideOverlayText()" onmouseout="showOverlayText()">
				<input id="overlayDropText" type="text" value="" />
				<div id="leftDivContent">
					<div id="debugText"></div>
				</div>
			</div>
		</td>
		<td id="righttd"><iframe id="searchFrame" src="about:blank"></iframe></td>
	</tr>
</table>
</div>
</body>
<script>
</script>
</html>
